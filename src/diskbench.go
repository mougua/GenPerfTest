package main

import (
	"fmt"
	"os"
	"time"
)

var filename = "test.txt"

func write() {

	// 1K
	s := "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901111111112345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789011111111123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890111111111234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901111111112345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789011111111123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890111111111234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901111111112345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789011111111"
	str := ""

	r := 4
	for k := 0; k < r; k++ {
		str = str + s
	}

	f, err := os.OpenFile(filename, os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		fmt.Printf("open accounts's file failed. err:%s", err.Error())
		return
	}
	defer f.Close()

	t0 := time.Now()
	r2 := 200000
	for k := 0; k < r2; k++ {
		f.WriteString(str)
	}
	f.Sync()
	fmt.Printf("%v bytes (%v MB, %v MiB) copied, %v s, %v MB/s\n",
		len(s)*r2*r,
		len(s)*r2*r/1024/1000,
		len(s)*r2*r/1024/1024,
		time.Since(t0).Seconds(),
		len(s)*r2*r/1024/1024/int(time.Since(t0).Seconds()))
}

func main() {
	write()
	os.Remove(filename)
}
